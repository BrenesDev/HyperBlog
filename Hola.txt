Hola mundo!
git init: lo usamos para determinar la carpeta en la que vamos a trabajar.
git status: lo usamos para saber si tenemos un archivo añadido o borrado en nuestro proyecto, para saber en la rama en la que estamos y si tenemos commits.
git add: es para añadir un archivo a nuestra rama seguidamente ponemos entre comillas el nombre de nuestro archivo o poner un punto para añadir todos los archios de nuestra carpeta.
git rm: lo usamos para borrar un archivo que hayamos añadido, para eliminarlo por completo de nuestra rama usamosgit rm --cached.
git commit: se usa para añadir un commit a nuestra rama, también podemos ponerle un -m seguidamente ponemos entre comillas nuestro ensaje.
git config: muestra configuraciones de git también podemos usar --list para mostrar la configuración por defecto de nuestro git y si añadimos --show-origin inhales nos muestra las configuraciones guardadas y su ubicación.
git config --global user.name: cambia de manera global el nombre del usuario, seguidamente ponemos entre comillas nuestro nombre.
git config --global user.email: cambia de manera global el email del usuario, seguidamente ponemos entre comillas nuestro nombre.
git log: se usa para ver la historia de nuestros archivos, los commits, el usuario que lo cambió, cuando se realizaron los cambios etc. seguidamente ponemos el nombre de nuestro archivo.

una nueva linea

Otra linea
git log ves el historial de commit o cambios
git show ves los cambios de los ultimos dos commit 
git diff a b para comparar commit
merge unir una rama con otra
git reset se usa pra volver a una versión anterior
Hard devuelve absoultamente todo a la versión que necesitamos
y soft devuelve a la versión que necesitamos, pero los cambiso que están en stagin se mantienen en stagin.
GIT REFLOG Y DESPUÉS GIT RESET PARA RETOMAR LOS CAMBIOS ELIMINADOS 
ANTES DEL GIT RESET XD

Git log --stat para ver los cambios en cada commit

Git checkout volver un archivo especifico a un commit especifico
git checkout master

Git merge para jalar cambios de una rama a la rama HEAD

Llaves públicas y privadas
Método para compartir mensajes cifrados entre dos personas
cada computador u ordenador o usuario tiene dos llaves una pública y una privada, entonces cuándo quiero
contactarme con una persona le comparto mi llave pública para que ella pueda enviarme mensajes, y necesito 
su llave pública para poder compartile mensajes, cada quién los descifra con su llave privada.


Creando llaves ssh para el repositorio github
$ ssh-keygen -t rsa -b 4096 -C brenes.dev@gmail.com

usando el algoritmo rsa el resto son comandos y el correo asociado a esta llave

comando para verificar que todas las llves ssh dentro del sistema operativo del ordenador esté corriendo correctamente
en windows:$ eval $(ssh-agent -s)
ssh-add id_rsa para agregar la ssh hay que navegar hasta el directorio donde se encuentra y ejecutar el comando
para mac : $ eval "$(ssh-agent -s)" ssh-add -K ruta
